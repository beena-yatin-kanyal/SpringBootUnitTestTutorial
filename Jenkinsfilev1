def jira_id_map
pipeline {
    agent any
	tools {
        maven 'localmaven'
    }
	stages{
		stage('Input Jira Id') {
			steps {
				script {
					try {
						timeout(time:30, unit:'SECONDS') {
							jira_id_map = input(message: 'Enter Jira Id (or leave blank) and press [Proceed]!!', parameters: [[$class: 'TextParameterDefinition', defaultValue: '', description: '', name: 'Jira Id']], submitterParameter: 'APPROVER')
						}
					} catch (err) {
					
					}
				}
			}
		}
		stage('Cleaning') {
			 steps {
				bat 'mvn clean'
            }
		}
		stage('Running Unit Tests') {
			 steps {
				bat 'mvn test'
            }
			post {
                failure {
                    echo ("Unit test cases failed. Logging a jira ticket for jira id= " + jira_id_map['Jira Id'] + ".")
                }
            }
		}
        stage('Build') {
            steps {
				bat 'mvn clean package'
            }
            post {
                success {
					script {
						if(jira_id_map != null && jira_id_map['Jira Id'] != null && jira_id_map['Jira Id'].toString()?.trim()) {
							build_info_comment = "Build ${currentBuild.number} started by " + jira_id_map['APPROVER'] + " is successful."
							jiraAddComment comment: build_info_comment, idOrKey: jira_id_map['Jira Id'].toString().toUpperCase(), site: 'localjira'
						} else {
							def new_issue = [fields: [ project: [key: 'SSP'], summary: 'Build error.', description: 'Jenkins job failed at build and test step. Please check!', issuetype: [name: 'Bug']]]
							jiraNewIssue issue: new_issue, site: 'localjira'
						}
					}
					echo 'Now Archiving'
                    archiveArtifacts artifacts: '**/target/*.jar'
                }
            }
        }
        stage ('Deploy to Staging') {
			steps {
				echo 'Deploying to staging.'
			}
        }
		stage ('Deploy to Production') {
            steps {
				echo 'Deploying to production.'
			}
        }
    }
}
def jira_site_name = 'localjira'
def jira_id_map
pipeline {
    agent any
	tools {
        maven 'localmaven'
    }
	stages{
		stage('Input details') {
			steps {
				script {
					try {
						timeout(time:30, unit:'SECONDS') {
							jira_id_map = input(message: 'Enter Jira Id (or leave blank) and press [Proceed]!!', parameters: [[$class: 'TextParameterDefinition', defaultValue: '', description: '', name: 'Jira Id']], submitterParameter: 'APPROVER')
						}
					} catch (err) {
					
					}
				}
			}
		}
		stage('Cleaning project directory') {
			 steps {
				bat 'mvn clean'
            }
		}
		stage('Run unit tests') {
			 steps {
				bat 'mvn test'
            }
			post {
				success {
					println ("All unit test cases failed. Publishing the unit results test coverage for the team.")
				}
                failure {
                    println ("Unit test cases failed. Logging a jira ticket for the developers!")
					script {
						build_info_comment = "Build ${currentBuild.number} started by " + jira_id_map['APPROVER'] + " failed while running unit tests."
						if(jira_id_map != null && jira_id_map['Jira Id'] != null && jira_id_map['Jira Id'].toString()?.trim()) {
								jiraAddComment comment: build_info_comment, idOrKey: jira_id_map['Jira Id'].toString().toUpperCase(), site: jira_site_name
						} else {
								new_issue = [fields: [ project: [key: 'SSP'], summary: 'Build error.', description: build_info_comment, issuetype: [name: 'Bug']]]
								jiraNewIssue issue: new_issue, site: jira_site_name
						}
					}
                }
            }
		}
        stage('Build') {
            steps {
				bat 'mvn clean package'
            }
            post {
                success {
					println ("Now Archiving.")
                    archiveArtifacts artifacts: '**/target/*.jar'
                }
            }
        }
		stage('Running vulnerability check') {
			steps {
				println("Running vulnerability check.")
			}
		}
        stage ('Push To ECS and Deploy') {
			steps {
				println ("Deploying to AWS environment.")
			}
        }
    }
}